/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IUniversalDAOInterface extends utils.Interface {
  functions: {
    "createProposal(bytes32,string)": FunctionFragment;
    "registerDAO(bytes32,address,address,uint256)": FunctionFragment;
    "setDaoToken(bytes32,address)": FunctionFragment;
    "setMember(bytes32,address,bool)": FunctionFragment;
    "setMinTokenHolding(bytes32,uint256)": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "vote(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createProposal"
      | "registerDAO"
      | "setDaoToken"
      | "setMember"
      | "setMinTokenHolding"
      | "setPause"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDAO",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoToken",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMember",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTokenHolding",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDaoToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinTokenHolding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "DAORegistered(bytes32,address,address,uint256)": EventFragment;
    "DaoTokenSet(bytes32,address)": EventFragment;
    "MemberSet(bytes32,address,bool)": EventFragment;
    "MinTokenHoldingSet(bytes32,uint256)": EventFragment;
    "ProposalCreated(bytes32,uint256,string)": EventFragment;
    "Voted(bytes32,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DAORegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinTokenHoldingSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export interface DAORegisteredEventObject {
  daoId: string;
  admin: string;
  token: string;
  minTokenHolding: BigNumber;
}
export type DAORegisteredEvent = TypedEvent<
  [string, string, string, BigNumber],
  DAORegisteredEventObject
>;

export type DAORegisteredEventFilter = TypedEventFilter<DAORegisteredEvent>;

export interface DaoTokenSetEventObject {
  daoId: string;
  token: string;
}
export type DaoTokenSetEvent = TypedEvent<
  [string, string],
  DaoTokenSetEventObject
>;

export type DaoTokenSetEventFilter = TypedEventFilter<DaoTokenSetEvent>;

export interface MemberSetEventObject {
  daoId: string;
  member: string;
  setRole: boolean;
}
export type MemberSetEvent = TypedEvent<
  [string, string, boolean],
  MemberSetEventObject
>;

export type MemberSetEventFilter = TypedEventFilter<MemberSetEvent>;

export interface MinTokenHoldingSetEventObject {
  daoId: string;
  minTokenHolding: BigNumber;
}
export type MinTokenHoldingSetEvent = TypedEvent<
  [string, BigNumber],
  MinTokenHoldingSetEventObject
>;

export type MinTokenHoldingSetEventFilter =
  TypedEventFilter<MinTokenHoldingSetEvent>;

export interface ProposalCreatedEventObject {
  daoId: string;
  proposalId: BigNumber;
  description: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [string, BigNumber, string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface VotedEventObject {
  daoId: string;
  proposalId: BigNumber;
  voter: string;
}
export type VotedEvent = TypedEvent<
  [string, BigNumber, string],
  VotedEventObject
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface IUniversalDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUniversalDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createProposal(
      daoId: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerDAO(
      daoId: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      minTokenHolding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDaoToken(
      daoId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMember(
      daoId: PromiseOrValue<BytesLike>,
      member: PromiseOrValue<string>,
      setRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinTokenHolding(
      daoId: PromiseOrValue<BytesLike>,
      minTokenHolding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPause(
      pause: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vote(
      daoId: PromiseOrValue<BytesLike>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createProposal(
    daoId: PromiseOrValue<BytesLike>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerDAO(
    daoId: PromiseOrValue<BytesLike>,
    admin: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    minTokenHolding: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDaoToken(
    daoId: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMember(
    daoId: PromiseOrValue<BytesLike>,
    member: PromiseOrValue<string>,
    setRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinTokenHolding(
    daoId: PromiseOrValue<BytesLike>,
    minTokenHolding: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPause(
    pause: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vote(
    daoId: PromiseOrValue<BytesLike>,
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createProposal(
      daoId: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerDAO(
      daoId: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      minTokenHolding: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoToken(
      daoId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMember(
      daoId: PromiseOrValue<BytesLike>,
      member: PromiseOrValue<string>,
      setRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTokenHolding(
      daoId: PromiseOrValue<BytesLike>,
      minTokenHolding: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(
      pause: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      daoId: PromiseOrValue<BytesLike>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DAORegistered(bytes32,address,address,uint256)"(
      daoId?: PromiseOrValue<BytesLike> | null,
      admin?: PromiseOrValue<string> | null,
      token?: null,
      minTokenHolding?: null
    ): DAORegisteredEventFilter;
    DAORegistered(
      daoId?: PromiseOrValue<BytesLike> | null,
      admin?: PromiseOrValue<string> | null,
      token?: null,
      minTokenHolding?: null
    ): DAORegisteredEventFilter;

    "DaoTokenSet(bytes32,address)"(
      daoId?: PromiseOrValue<BytesLike> | null,
      token?: null
    ): DaoTokenSetEventFilter;
    DaoTokenSet(
      daoId?: PromiseOrValue<BytesLike> | null,
      token?: null
    ): DaoTokenSetEventFilter;

    "MemberSet(bytes32,address,bool)"(
      daoId?: PromiseOrValue<BytesLike> | null,
      member?: PromiseOrValue<string> | null,
      setRole?: null
    ): MemberSetEventFilter;
    MemberSet(
      daoId?: PromiseOrValue<BytesLike> | null,
      member?: PromiseOrValue<string> | null,
      setRole?: null
    ): MemberSetEventFilter;

    "MinTokenHoldingSet(bytes32,uint256)"(
      daoId?: PromiseOrValue<BytesLike> | null,
      minTokenHolding?: null
    ): MinTokenHoldingSetEventFilter;
    MinTokenHoldingSet(
      daoId?: PromiseOrValue<BytesLike> | null,
      minTokenHolding?: null
    ): MinTokenHoldingSetEventFilter;

    "ProposalCreated(bytes32,uint256,string)"(
      daoId?: PromiseOrValue<BytesLike> | null,
      proposalId?: null,
      description?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      daoId?: PromiseOrValue<BytesLike> | null,
      proposalId?: null,
      description?: null
    ): ProposalCreatedEventFilter;

    "Voted(bytes32,uint256,address)"(
      daoId?: PromiseOrValue<BytesLike> | null,
      proposalId?: null,
      voter?: PromiseOrValue<string> | null
    ): VotedEventFilter;
    Voted(
      daoId?: PromiseOrValue<BytesLike> | null,
      proposalId?: null,
      voter?: PromiseOrValue<string> | null
    ): VotedEventFilter;
  };

  estimateGas: {
    createProposal(
      daoId: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerDAO(
      daoId: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      minTokenHolding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDaoToken(
      daoId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMember(
      daoId: PromiseOrValue<BytesLike>,
      member: PromiseOrValue<string>,
      setRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinTokenHolding(
      daoId: PromiseOrValue<BytesLike>,
      minTokenHolding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPause(
      pause: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vote(
      daoId: PromiseOrValue<BytesLike>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createProposal(
      daoId: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerDAO(
      daoId: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      minTokenHolding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDaoToken(
      daoId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMember(
      daoId: PromiseOrValue<BytesLike>,
      member: PromiseOrValue<string>,
      setRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinTokenHolding(
      daoId: PromiseOrValue<BytesLike>,
      minTokenHolding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      pause: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      daoId: PromiseOrValue<BytesLike>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
